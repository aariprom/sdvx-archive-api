{
  "name": "sdvx-archive-api",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "// compose": "",
    "net:up": "docker network create sdvx_net || true",
    "net:down": "docker network remove sdvx_net",
    "compose:up:local": "dotenvx run -f env/.env.local -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.local.yml up -d --build",
    "compose:down:local": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.local.yml down",
    "compose:up:dev": "dotenvx run -f env/.env.dev -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml up -d --build",
    "compose:down:dev": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml down",
    "compose:up:prod": "dotenvx run -f env/.env.prod -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml up -d --build",
    "compose:down:prod": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml down",
    "db:up:local": "npm run net:up && dotenvx run -f env/.env.local -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.local.yml up -d db",
    "db:down:local": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.local.yml stop db && docker compose -f docker/docker-compose.yml -f docker/docker-compose.local.yml rm -f db",
    "db:logs:local": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.local.yml logs -f db",
    "db:psql:local": "dotenvx run -f env/.env.local -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.local.yml exec db psql -U ${PGUSER:-sdvx} -d ${PGDATABASE:-sdvx}",
    "db:up:dev": "npm run net:up && dotenvx run -f env/.env.dev -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml up -d db",
    "db:down:dev": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml stop db && docker compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml rm -f db",
    "db:logs:dev": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml logs -f db",
    "db:psql:dev": "dotenvx run -f env/.env.dev -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml exec db psql -U ${PGUSER:-sdvx} -d ${PGDATABASE:-sdvx}",
    "db:up:prod": "npm run net:up && dotenvx run -f env/.env.prod -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml up -d db",
    "db:down:prod": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml stop db && docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml rm -f db",
    "db:logs:prod": "docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml logs -f db",
    "db:psql:prod": "dotenvx run -f env/.env.prod -- docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml exec db psql -U ${PGUSER:-sdvx} -d ${PGDATABASE:-sdvx}",
    "// encrypt": "echo 'encrypt env/.env.* files based on dotenvx package'",
    "encrypt:local": "dotenvx encrypt -f env/.env.local",
    "encrypt:dev": "dotenvx encrypt -f env/.env.dev",
    "encrypt:prod": "dotenvx encrypt -f env/.env.prod",
    "// decrypt": "echo 'decrypt env/.env.* files based on dotenvx package'",
    "decrypt:local": "dotenvx decrypt -f env/.env.local.encrypted -o env/.env.local",
    "decrypt:dev": "dotenvx decrypt -f env/.env.dev.encrypted -o env/.env.dev",
    "decrypt:prod": "dotenvx decrypt -f env/.env.prod.encrypted -o env/.env.prod",
    "// prisma": "",
    "prisma:generate:local": "dotenvx run -f env/.env.local -- prisma generate",
    "prisma:generate:dev": "dotenvx run -f env/.env.dev -- prisma generate",
    "prisma:generate:prod": "dotenvx run -f env/.env.prod -- prisma generate",
    "prisma:migrate:local": "dotenvx run -f env/.env.local -- prisma migrate dev",
    "prisma:migrate:dev": "dotenvx run -f env/.env.dev -- prisma migrate dev",
    "prisma:migrate:prod": "dotenvx run -f env/.env.prod -- prisma migrate deploy",
    "prisma:studio:dev": "dotenvx run -f env/.env.dev -- prisma studio",
    "prisma:status:local": "dotenvx run -f env/.env.local -- prisma migrate status",
    "prisma:reset:local": "dotenvx run -f env/.env.local -- prisma migrate reset --force",
    "build": "nest build",
    "start:local": "dotenvx run -f env/.env.local -- node dist/main.js",
    "start:dev": "dotenvx run -f env/.env.dev -- node dist/main.js",
    "start:prod": "dotenvx run -f env/.env.prod -- node dist/main.js",
    "dev:local": "dotenvx run -f env/.env.local -- nest start --watch",
    "dev:dev": "dotenvx run -f env/.env.dev -- nest start --watch",
    "dev:docker": "nest start --watch",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@dotenvx/dotenvx": "^1.49.0",
    "@nestjs/common": "^11.0.1",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.1",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.0.1",
    "@nestjs/swagger": "^11.2.0",
    "@prisma/client": "^6.14.0",
    "argon2": "^0.44.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "prisma": "^6.14.0",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.1",
    "swagger-ui-express": "^5.0.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.1",
    "@types/express": "^5.0.0",
    "@types/jest": "^30.0.0",
    "@types/node": "^22.10.7",
    "@types/passport-jwt": "^4.0.1",
    "@types/supertest": "^6.0.2",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.2",
    "globals": "^16.0.0",
    "jest": "^30.0.0",
    "prettier": "^3.4.2",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.20.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
